# 🧪 AutomationPractice 2025

Professional automation using Serenity BDD + Screenplay Pattern

---

## 🚀 Purpose

This repository is a professional test automation framework based on:

* Serenity BDD 4.2.22
* Screenplay Pattern
* Selenium 4.32.0
* Cucumber + Gherkin
* JUnit 4

Applied to the demo site: [AutomationPractice Demo](http://www.automationpractice.pl/index.php)

---

## 🧱 Project Structure

```
src
├── main
│   └── java/co.com.automationpractice2025
│       ├── interactions      # Custom actions (e.g., wait for load, open browser)
│       ├── questions         # UI validations or queries
│       ├── tasks             # Business actions (login, register)
│       ├── userinterfaces    # PageObjects with Targets (web elements)
│       └── utils             # General utilities (driver selection)
├── test
│   └── java/co.com.automationpractice2025
│       ├── runners           # Execution classes using Cucumber
│       └── stepdefinitions   # Gherkin step mappings
└── test/resources
    └── features/login        # BDD scenarios written in Gherkin
```

---

## ✅ Implemented Functional Scenario

### `login_successful.feature`

```gherkin
Scenario: Login to Automation Practice. Successful login with valid credentials
  Given that Juan wants to access the Automation Practice page
  When he logs in with valid credentials
  Then he should see his account dashboard
```

🔍 This scenario:

* Opens the browser
* Logs in with valid credentials
* Waits for the dashboard to load
* Validates that "MY ACCOUNT" is displayed

---

## ⚙️ Execution

### From terminal:

```bash
./gradlew clean test
```

Serenity launches the browser (Chrome by default) and runs the scenarios defined in `features/login`.

---

## 🔍 Technologies Used

* Java 17+
* Gradle 8.4+
* Serenity BDD
* Selenium 4
* Cucumber JVM
* JUnit 4
* SLF4J + Logback

---

## 📌 Achieved Milestone

> Browser launches correctly, login is successful, flow is stable using Screenplay, elements are properly waited with `WaitUntil`, and validated using a custom `Question`.

---

## 🛠️ Next Step

Implement the scenario:

```gherkin
Scenario: Create account with valid data
```

> This flow will include:
>
> * Filling forms with random data
> * Validating success registration message
> * Using composite `Task` and a `Model`
