plugins {
    id 'java'
    id 'idea'
}

group = 'co.com.automationpractice2025'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        url = "https://plugins.gradle.org/m2/"
    }
}

// Versiones ahora leídas desde gradle.properties
ext {
    serenityVersion = findProperty('serenityVersion') ?: '4.2.22'
    serenityCucumberVersion = findProperty('serenityCucumberVersion') ?: '4.2.22'
}

dependencies {
    // Núcleo de Serenity BDD
    implementation "net.serenity-bdd:serenity-core:$serenityVersion"
    implementation "net.serenity-bdd:serenity-junit:$serenityVersion"
    implementation "net.serenity-bdd:serenity-cucumber:$serenityCucumberVersion"
    implementation "net.serenity-bdd:serenity-ensure:$serenityVersion"

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'

    // JSON y WebDriverManager
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.18.3'
    testImplementation 'io.github.bonigarcia:webdrivermanager:6.1.0'
    testImplementation "org.junit.vintage:junit-vintage-engine:5.12.2"

    // Screenplay Pattern + WebDriver
    implementation "net.serenity-bdd:serenity-screenplay:$serenityVersion"
    implementation "net.serenity-bdd:serenity-screenplay-webdriver:$serenityVersion"

    // PageObjects y anotaciones
    implementation "net.serenity-bdd:serenity-model:$serenityVersion"

    // Selenium moderno
    implementation 'org.seleniumhq.selenium:selenium-java:4.32.0'

    // Reportes
    testImplementation "net.serenity-bdd:serenity-reports:$serenityVersion"

    // Logging estructurado
    implementation 'org.slf4j:slf4j-api:2.0.17'
    implementation 'ch.qos.logback:logback-classic:1.5.18'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    systemProperties = System.properties
    maxParallelForks = Runtime.runtime.availableProcessors()
    systemProperty 'serenity.reports', 'single-page-html'
}

// Permite que siga ejecutando tareas aunque ocurran errores
gradle.startParameter.continueOnFailure = true

// ✅ Tarea personalizada para ejecutar pruebas y generar el reporte Allure
task testWithAllure {
    group = "Verification"
    description = "Ejecuta pruebas, genera y abre el reporte Allure, incluso si hay fallos"

    doLast {
        // Ejecutar pruebas con tolerancia a errores
        def result = exec {
            commandLine 'cmd', '/c', 'gradlew.bat clean test --continue'
            ignoreExitValue = true
        }

        // Borrar reporte anterior
        file("allure-report").deleteDir()

        // Generar nuevo reporte Allure
        exec {
            commandLine 'cmd', '/c', 'allure generate target/site/serenity --clean -o allure-report'
        }

        // Abrir reporte en navegador
        exec {
            commandLine 'cmd', '/c', 'allure open allure-report'
        }

        // Mostrar estado final
        if (result.exitValue != 0) {
            println "\n⚠️ Algunas pruebas fallaron, pero el reporte Allure fue generado y abierto correctamente.\n"
        } else {
            println "\n✅ Todas las pruebas pasaron y el reporte Allure fue abierto con éxito.\n"
        }
    }
}





